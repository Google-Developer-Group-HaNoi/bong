import { GoogleGenerativeAI } from "@google/generative-ai";
import { Document } from "langchain/document";
import { Chroma } from "@langchain/community/vectorstores/chroma";
import { GoogleGenerativeAIEmbeddings } from "@langchain/google-genai";
import { TextLoader } from "langchain/document_loaders/fs/text";
import * as fs from 'fs';
import * as path from 'path';

const CHROMA_DB_PATH = 'data/chroma_db';
const TEXT_DIR = 'data/text_documents';

const GEMINI_SYSTEM_PROMPT = `B·∫°n t√™n l√† B√¥ng, l√† tr·ª£ l√Ω ·∫£o th√¥ng minh c·ªßa Google Developer Groups H√† N·ªôi.

B·ªëi c·∫£nh t∆∞∆°ng t√°c:
- Ng∆∞·ªùi d√πng ƒëang ghi h√¨nh v√† n√≥i chuy·ªán b·∫±ng ti·∫øng Vi·ªát.
- H·ªç s·∫Ω cho b·∫°n xem h√¨nh ·∫£nh v√† ƒë·∫∑t c√¢u h·ªèi b·∫±ng gi·ªçng n√≥i.
- H√£y tr·∫£ l·ªùi vui v·∫ª, h√†i h∆∞·ªõc, t·ª± nhi√™n, ng·∫Øn g·ªçn, s√∫c t√≠ch v√† ch√≠nh x√°c b·∫±ng ti·∫øng Vi·ªát.

Nguy√™n t·∫Øc t∆∞∆°ng t√°c:
1. T·∫≠p trung v√†o n·ªôi dung c√¢u h·ªèi v√† th√¥ng tin trong h√¨nh ·∫£nh li√™n quan.
2. Ch√∫ √Ω ƒë·∫øn c·ª≠ ch·ªâ c·ªßa ng∆∞·ªùi d√πng n·∫øu li√™n quan ƒë·∫øn c√¢u h·ªèi.
3. Kh√¥ng b√¨nh lu·∫≠n v·ªÅ trang ph·ª•c, n∆°i ng·ªìi, ho·∫∑c n√©t m·∫∑t c·ªßa ng∆∞·ªùi d√πng.
4. Ch·ªâ m√¥ t·∫£ nh·ªØng ph·∫ßn c·ªßa h√¨nh ·∫£nh c·∫ßn thi·∫øt ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi.
5. S·ª≠ d·ª•ng th√¥ng tin t·ª´ c√°c cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ph√π h·ª£p.
6. N·∫øu c√¢u h·ªèi kh√¥ng r√µ r√†ng, l·ªãch s·ª± ƒë·ªÅ ngh·ªã ng∆∞·ªùi d√πng l√†m r√µ.

H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng th√¥ng tin b·ªï sung:
7. D∆∞·ªõi ƒë√¢y l√† th√¥ng tin b·ªï sung li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng. H√£y s·ª≠ d·ª•ng th√¥ng tin n√†y ƒë·ªÉ l√†m phong ph√∫ c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n.
8. K·∫øt h·ª£p th√¥ng tin b·ªï sung m·ªôt c√°ch t·ª± nhi√™n v√†o c√¢u tr·∫£ l·ªùi, kh√¥ng c·∫ßn tr√≠ch d·∫´n tr·ª±c ti·∫øp.
9. N·∫øu th√¥ng tin b·ªï sung kh√¥ng li√™n quan tr·ª±c ti·∫øp ƒë·∫øn c√¢u h·ªèi, h√£y t·∫≠p trung v√†o nh·ªØng g√¨ b·∫°n ƒë√£ bi·∫øt ƒë·ªÉ tr·∫£ l·ªùi.
10. S·ª≠ d·ª•ng ph·∫ßn CONTENT ƒë·ªÉ gi·∫£i th√≠ch chi ti·∫øt.
11. S·ª≠ d·ª•ng KEY POINTS ƒë·ªÉ cung c·∫•p th√¥ng tin t√≥m t·∫Øt.
12. S·ª≠ d·ª•ng EXAMPLES khi c·∫ßn minh h·ªça th·ª±c t·∫ø.

Lu√¥n gi·ªØ th√°i ƒë·ªô chuy√™n nghi·ªáp, th√¢n thi·ªán v√† h·ªØu √≠ch trong m·ªçi t∆∞∆°ng t√°c.

----- L·ªäCH S·ª¨ CU·ªòC TR√í CHUY·ªÜN -----
{{CONVERSATION_HISTORY}}

----- TH√îNG TIN B·ªî SUNG -----
{{ADDITIONAL_CONTEXT}}

----- C√ÇU H·ªéI C·ª¶A NG∆Ø·ªúI D√ôNG D∆Ø·ªöI ƒê√ÇY -----
{{USER_PROMPT}}
`;

interface ConversationTurn {
  role: 'user' | 'assistant';
  content: string;
}

async function initializeChromaDB(): Promise<Chroma> {
  const embeddings = new GoogleGenerativeAIEmbeddings({
    modelName: "embedding-001",
    apiKey: import.meta.env.VITE_GEMINI_KEY,
  });

  return await Chroma.fromExistingCollection(
    embeddings,
    { collectionName: "gdg_hanoi_docs" }
  );
}

function parseDocument(content: string): Record<string, string> {
  const sections = content.split(/(?=# |## |### )/);
  const result: Record<string, string> = {};

  sections.forEach(section => {
    const lines = section.trim().split('\n');
    const header = lines[0].replace(/^#+\s*/, '').trim();
    const body = lines.slice(1).join('\n').trim();

    if (header.startsWith('TITLE:')) {
      result.title = header.replace('TITLE:', '').trim();
    } else if (header.startsWith('SUBTOPIC:')) {
      result.subtopic = header.replace('SUBTOPIC:', '').trim();
    } else if (header.startsWith('TAGS:')) {
      result.tags = header.replace('TAGS:', '').trim();
    } else {
      result[header.toLowerCase()] = body;
    }
  });

  return result;
}

export async function embedDocuments() {
  const embeddings = new GoogleGenerativeAIEmbeddings({
    modelName: "embedding-001",
    apiKey: import.meta.env.VITE_GEMINI_KEY,
  });

  const vectorStore = await Chroma.fromExistingCollection(
    embeddings,
    { collectionName: "gdg_hanoi_docs" }
  );

  const files = fs.readdirSync(TEXT_DIR);

  for (const file of files) {
    const filePath = path.join(TEXT_DIR, file);
    const loader = new TextLoader(filePath);
    const [doc] = await loader.load();

    const parsedDoc = parseDocument(doc.pageContent);
    const { title, subtopic, tags, content, ...sections } = parsedDoc;

    // Embed each section separately
    for (const [sectionName, sectionContent] of Object.entries(sections)) {
      await vectorStore.addDocuments([
        new Document({
          pageContent: sectionContent,
          metadata: {
            title,
            subtopic,
            tags,
            section: sectionName,
            file
          }
        })
      ]);
    }
  }

  console.log("Documents embedded and stored in Chroma DB");
}

async function retrieveRelevantDocs(query: string): Promise<Document[]> {
  const vectorStore = await initializeChromaDB();

  // Perform a similarity search
  const results = await vectorStore.similaritySearch(query, 5);

  return results;
}

export async function makeGeminiRequest(
  text: string,
  images: { mimeType: string; data: string }[],
  setResponse: React.Dispatch<React.SetStateAction<string>>,
  speak: (message: string) => void,
  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>,
  conversationHistory: ConversationTurn[]
): Promise<any> {
  const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_KEY);

  const model = genAI.getGenerativeModel({
    model: import.meta.env.VITE_GEMINI_MODEL,
  });

  if (images.length === 0 && !text) return null;

  try {
    const relevantDocs = await retrieveRelevantDocs(text);
    const additionalContext = relevantDocs.map(doc => {
      const { section, ...metadata } = doc.metadata as Record<string, string>;
      return `${section.toUpperCase()}:\n${doc.pageContent}\n\nMETADATA: ${JSON.stringify(metadata)}`;
    }).join('\n\n');

    const historyString = conversationHistory
      .map(turn => `${turn.role.toUpperCase()}: ${turn.content}`)
      .join('\n');

    const promptWithHistory = GEMINI_SYSTEM_PROMPT
      .replace("{{CONVERSATION_HISTORY}}", historyString)
      .replace("{{ADDITIONAL_CONTEXT}}", additionalContext)
      .replace("{{USER_PROMPT}}", text);

    const result = await model.generateContentStream([
      promptWithHistory,
      ...images.map((image) => ({
        inlineData: image,
      })),
    ]);

    const response = result.response;
    const content = (await response).text();
    speak(content);
    setResponse(content);
    setIsLoading(false);
    return response;
  } catch (error) {
    setResponse("H√¨nh nh∆∞ c√≥ l·ªói g√¨ ƒë√≥ r·ªìi ü•∫ B·∫°n c√≥ th·ªÉ n√≥i l·∫°i kh√¥ng? ü§ó");
    speak("H√¨nh nh∆∞ c√≥ l·ªói g√¨ ƒë√≥ r·ªìi ü•∫ B·∫°n c√≥ th·ªÉ n√≥i l·∫°i kh√¥ng? ü§ó");
    setIsLoading(false);
    console.error(error);
    throw error;
  }
}

// Uncomment to embed documents
embedDocuments();